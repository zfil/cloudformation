---
AWSTemplateFormatVersion: 2010-09-09

Description: This template regroups Lambdas to be used in custom resources to workaround current CF limitations

Resources:

# LambdaTagCloudFront ----------
  LambdaTagCloudFrontRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaTagCloudFrontRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ActionsOnCloudFrontTags
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - cloudfront:TagResource
            - cloudfront:UntagResource
            - cloudfront:ListTagsForResource
            Effect: Allow
            Resource: "*"

  # Workaround current CloudFormation limitation where it is not possible to set Tags on CloudFront distributions
  # Parameters:
  # - CloudFrontArn: Arn of CloudFront distribution to modify
  # - Tags: a list of { 'Key': key, 'Value': value }
  LambdaTagCloudFront:
    Type: AWS::Lambda::Function
    Properties:
      Description: Workaround current CloudFormation limitation where it is not possible to set Tags on CloudFront distributions
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import logging
          import uuid
          import traceback

          cloudfront = boto3.client('cloudfront')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              physicalResourceId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event \
                  else event['LogicalResourceId'] + '-' + str(uuid.uuid4()).upper().replace("-", "")[:12]
              logger.info('PhysicalResourceId: ' + physicalResourceId)
              responseData = {}

              try:
                  cloudFrontArn = event['ResourceProperties']['CloudFrontArn']
                  logger.info('CloudFrontArn: ' + cloudFrontArn)
                  tags = event['ResourceProperties']['Tags']
                  logger.info('Tags: ' + str(tags))
                  logger.info('RequestType: ' + event['RequestType'])
                  if event['RequestType'] != 'Delete':
                      cloudfront.tag_resource(
                          Resource=cloudFrontArn,
                          Tags={'Items': tags})
                  else:
                      cloudfront.untag_resource(
                          Resource=cloudFrontArn,
                          TagKeys={'Items': [t['Key'] for t in tags]})
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId)
              except:
                  logger.warning('handler Failed: %s' % traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, physicalResourceId)
      Handler: index.handler
      Role: !GetAtt LambdaTagCloudFrontRole.Arn
      Runtime: python3.6
      Timeout: 10

  LambdaTagCloudFrontLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaTagCloudFront
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaTagCloudFront}"
      RetentionInDays: 365
# End LambdaTagCloudFront ----------

# LambdaTagKms ----------
  LambdaTagKmsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaTagKmsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ActionsOnKmsTags
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - kms:TagResource
            - kms:UntagResource
            - kms:ListTagsForResource
            Effect: Allow
            Resource: "*"

  # Workaround current CloudFormation limitation where it is not possible to set Tags on KMS Keys
  # Parameters:
  # - KeyId: Unique key ID of the CMK to modify
  # - Tags: a list of { 'Key': key, 'Value': value }
  LambdaTagKms:
    Type: AWS::Lambda::Function
    Properties:
      Description: Workaround current CloudFormation limitation where it is not possible to set Tags on KMS Keys
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import logging
          import uuid
          import traceback

          kms = boto3.client('kms')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              physicalResourceId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event \
                  else event['LogicalResourceId'] + '-' + str(uuid.uuid4()).upper().replace("-", "")[:12]
              logger.info('PhysicalResourceId: ' + physicalResourceId)
              responseData = {}

              try:
                  keyId = event['ResourceProperties']['KeyId']
                  logger.info('KeyId: ' + keyId)
                  tags = [{'TagKey': v['Key'], 'TagValue': v['Value']} for v in event['ResourceProperties']['Tags']]
                  logger.info('Tags: ' + str(tags))
                  logger.info('RequestType: ' + event['RequestType'])
                  if event['RequestType'] != 'Delete':
                      kms.tag_resource(
                          KeyId=keyId,
                          Tags=tags)
                  else:
                      kms.untag_resource(
                          KeyId=keyId,
                          TagKeys=[t['TagKey'] for t in tags])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId)
              except:
                  logger.warning('handler Failed: %s' % traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, physicalResourceId)
      Handler: index.handler
      Role: !GetAtt LambdaTagKmsRole.Arn
      Runtime: python3.6
      Timeout: 10

  LambdaTagKmsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaTagKms
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaTagKms}"
      RetentionInDays: 365
# End LambdaTagKms ----------

# LambdaS3LifecycleAddCleanUps ----------
  LambdaS3LifecycleAddCleanUpsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaS3LifecycleAddCleanUpsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ActionsOnS3LifecycleConfiguration
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - s3:GetLifecycleConfiguration
            - s3:PutLifecycleConfiguration
            Effect: Allow
            Resource: "*"

  # Workaround current CloudFormation limitation where it is not possible to configure S3 Lifecycle AbortIncompleteMultipartUpload and ExpiredObjectDeleteMarker.
  # Beware if you use this Custom resource don't use AbortIncompleteMultipartUpload property.
  # Parameters:
  # - Bucket: Bucket to modify
  LambdaS3LifecycleAddCleanUps:
    Type: AWS::Lambda::Function
    Properties:
      Description: Workaround current CloudFormation limitation where it is not possible to configure S3 Lifecycle AbortIncompleteMultipartUpload and ExpiredObjectDeleteMarker
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import logging
          import uuid
          import traceback
          from botocore.exceptions import ClientError

          s3 = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              physicalResourceId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event \
                  else event['LogicalResourceId'] + '-' + str(uuid.uuid4()).upper().replace("-", "")[:12]
              logger.info('PhysicalResourceId: ' + physicalResourceId)
              responseData = {}

              try:
                  if event['RequestType'] != 'Delete':
                      bucket = event['ResourceProperties']['Bucket']
                      logger.info('Bucket: ' + bucket)

                      try:
                          rules = s3.get_bucket_lifecycle_configuration(Bucket=bucket)['Rules']
                      except ClientError:
                          rules = []

                      need_update = False
                      for rule in rules:
                          if 'Expiration' not in rule:
                              rule['Expiration'] = {'ExpiredObjectDeleteMarker': True}
                              need_update = True
                          if 'AbortIncompleteMultipartUpload' not in rule:
                              rule['AbortIncompleteMultipartUpload'] = {'DaysAfterInitiation': 2}
                              need_update = True
                      if need_update:
                          logger.info('Updating Rules: ' + str(rules))
                          s3.put_bucket_lifecycle_configuration(Bucket=bucket, LifecycleConfiguration={'Rules': rules})
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId)
              except:
                  logger.warning('handler Failed: %s' % traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, physicalResourceId)
      Handler: index.handler
      Role: !GetAtt LambdaS3LifecycleAddCleanUpsRole.Arn
      Runtime: python3.6
      Timeout: 10

  LambdaS3LifecycleAddCleanUpsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaS3LifecycleAddCleanUps
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaS3LifecycleAddCleanUps}"
      RetentionInDays: 365
# End LambdaS3LifecycleAddCleanUps ----------

# LambdaCloudFrontOriginAccessIdentity ----------
  LambdaCloudFrontOriginAccessIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaCloudFrontOriginAccessIdentityRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ActionsOnCloudFrontOriginAccessIdentity
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - cloudfront:GetCloudFrontOriginAccessIdentity
            - cloudfront:CreateCloudFrontOriginAccessIdentity
            - cloudfront:UpdateCloudFrontOriginAccessIdentity
            - cloudfront:DeleteCloudFrontOriginAccessIdentity
            Effect: Allow
            Resource: "*"

  # Workaround current CloudFormation limitation where it is not possible to manage CloudFront Origin Access Identities
  # Parameters:
  # - Name: name of the CloudFront Origin Access Identity you want to create (needs to be unique)
  # - Returns: CloudFrontOriginAccessIdentityId
  LambdaCloudFrontOriginAccessIdentity:
    Type: AWS::Lambda::Function
    Properties:
      Description: Workaround current CloudFormation limitation where it is not possible to manage CloudFront Origin Access Identities
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import logging
          import uuid
          import traceback

          cloudfront = boto3.client('cloudfront')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              physicalResourceId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event \
                  else event['LogicalResourceId'] + '-' + str(uuid.uuid4()).upper().replace("-", "")[:12]
              responseData = {}

              try:
                  name = event['ResourceProperties']['Name']
                  logger.info('Name: ' + name)

                  if event['RequestType'] == 'Create':
                      result = cloudfront.create_cloud_front_origin_access_identity(
                          CloudFrontOriginAccessIdentityConfig={
                              'CallerReference': name,
                              'Comment': name
                          })
                      cfoai_id = result['CloudFrontOriginAccessIdentity']['Id']
                      responseData['CloudFrontOriginAccessIdentityId'] = cfoai_id
                      physicalResourceId = cfoai_id
                      logger.info('Created PhysicalResourceId: ' + physicalResourceId)
                  elif event['RequestType'] == 'Update':
                      cfoai = cloudfront.get_cloud_front_origin_access_identity(Id=physicalResourceId)
                      result = cloudfront.update_cloud_front_origin_access_identity(
                          CloudFrontOriginAccessIdentityConfig={
                              'CallerReference': name,
                              'Comment': name
                          },
                          Id=physicalResourceId,
                          IfMatch=cfoai['ETag'])
                      responseData['CloudFrontOriginAccessIdentityId'] = result['CloudFrontOriginAccessIdentity']['Id']
                      logger.info('Updated PhysicalResourceId: ' + physicalResourceId)
                  elif event['RequestType'] == 'Delete':
                      cfoai = cloudfront.get_cloud_front_origin_access_identity(Id=physicalResourceId)
                      cloudfront.delete_cloud_front_origin_access_identity(
                          Id=physicalResourceId,
                          IfMatch=cfoai['ETag'])
                      logger.info('Deleted PhysicalResourceId: ' + physicalResourceId)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, physicalResourceId)
              except:
                  logger.warning('handler Failed: %s' % traceback.format_exc())
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, physicalResourceId)
      Handler: index.handler
      Role: !GetAtt LambdaCloudFrontOriginAccessIdentityRole.Arn
      Runtime: python3.6
      Timeout: 10

  LambdaCloudFrontOriginAccessIdentityLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaCloudFrontOriginAccessIdentity
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaCloudFrontOriginAccessIdentity}"
      RetentionInDays: 365
# End LambdaCloudFrontOriginAccessIdentity ----------

Outputs:
  LambdaTagCloudFront:
    Description: LambdaTagCloudFront ARN
    Value: !GetAtt LambdaTagCloudFront.Arn
    Export:
      Name: LambdaTagCloudFront

  LambdaTagKms:
    Description: LambdaTagKms ARN
    Value: !GetAtt LambdaTagKms.Arn
    Export:
      Name: LambdaTagKms

  LambdaS3LifecycleAddCleanUps:
    Description: LambdaS3LifecycleAddCleanUps ARN
    Value: !GetAtt LambdaS3LifecycleAddCleanUps.Arn
    Export:
      Name: LambdaS3LifecycleAddCleanUps

  LambdaCloudFrontOriginAccessIdentity:
    Description: LambdaCloudFrontOriginAccessIdentity ARN
    Value: !GetAtt LambdaCloudFrontOriginAccessIdentity.Arn
    Export:
      Name: LambdaCloudFrontOriginAccessIdentity
